{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-io-sqs\n\n\nThe \nsiddhi-io-sqs extension\n is an extension to \nSiddhi\n \nthat used to receive and publish events via AWS SQS Service. This extension allows users to subscribe to a SQS queue \nand receive/publish SQS messages.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\nSiddhi Branch\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.7\n.\n\n\nFeatures\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support.\n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.io.sqs\n/groupId\n\n        \nartifactId\nsiddhi-io-sqs\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n.\n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.\n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.\n\n\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-io-sqs", 
            "text": "The  siddhi-io-sqs extension  is an extension to  Siddhi  \nthat used to receive and publish events via AWS SQS Service. This extension allows users to subscribe to a SQS queue \nand receive/publish SQS messages.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-io-sqs"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Siddhi Branch  Jenkins Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.7 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.    This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.io.sqs /groupId \n         artifactId siddhi-io-sqs /artifactId \n         version x.x.x /version \n      /dependency     Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .    Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org    We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.    For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "How to use"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.7/", 
            "text": "API Docs - v1.0.7\n\n\nSink\n\n\nsqs \n(Sink)\n\n\nSQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages\n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, message.group.id=\nSTRING\n, deduplication.id=\nSTRING\n, delay.interval=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue url which SQS Sink should connect to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.group.id\n\n        \nID of the group that the message belong to(only applicable for FIFO Queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndeduplication.id\n\n        \nID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelay.interval\n\n        \nTime in seconds for how long the message remain in the queue until it is available for the consumers to consume.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\nsqs\n,queue=\nqueue_url\n,access.key=\naws_access_key\n,secret.key=\naws_secret_key\n,region=\nregion\n,delay.interval=\n5\n,deduplication.id=\n{{deduplicationID}}\n,message.group.id=\ncharuka\n,@map(type=\nxml\n) )define stream outStream(symbol string, deduplicationID string);\n\n\n\n\n\nFollowing Example shows how to define a SQS sink to publish messages to the service\n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, wait.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwait.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,wait.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#api-docs-v107", 
            "text": "", 
            "title": "API Docs - v1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.7/#sqs-sink", 
            "text": "SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages  Syntax  @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue url which SQS Sink should connect to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         message.group.id \n         ID of the group that the message belong to(only applicable for FIFO Queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         deduplication.id \n         ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         delay.interval \n         Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type= sqs ,queue= queue_url ,access.key= aws_access_key ,secret.key= aws_secret_key ,region= region ,delay.interval= 5 ,deduplication.id= {{deduplicationID}} ,message.group.id= charuka ,@map(type= xml ) )define stream outStream(symbol string, deduplicationID string);  Following Example shows how to define a SQS sink to publish messages to the service", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/1.0.7/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.7/#sqs-source", 
            "text": "SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         wait.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,wait.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/api/1.0.6/", 
            "text": "API Docs - v1.0.6\n\n\nSink\n\n\nsqs \n(Sink)\n\n\nSQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages\n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, message.group.id=\nSTRING\n, deduplication.id=\nSTRING\n, delay.interval=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue url which SQS Sink should connect to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.group.id\n\n        \nID of the group that the message belong to(only applicable for FIFO Queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndeduplication.id\n\n        \nID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelay.interval\n\n        \nTime in seconds for how long the message remain in the queue until it is available for the consumers to consume.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\nsqs\n,queue=\nqueue_url\n,access.key=\naws_access_key\n,secret.key=\naws_secret_key\n,region=\nregion\n,delay.interval=\n5\n,deduplication.id=\n{{deduplicationID}}\n,message.group.id=\ncharuka\n,@map(type=\nxml\n) )define stream outStream(symbol string, deduplicationID string);\n\n\n\n\n\nFollowing Example shows how to define a SQS sink to publish messages to the service\n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, wait.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwait.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,wait.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.6/#sqs-sink", 
            "text": "SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages  Syntax  @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue url which SQS Sink should connect to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         message.group.id \n         ID of the group that the message belong to(only applicable for FIFO Queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         deduplication.id \n         ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         delay.interval \n         Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type= sqs ,queue= queue_url ,access.key= aws_access_key ,secret.key= aws_secret_key ,region= region ,delay.interval= 5 ,deduplication.id= {{deduplicationID}} ,message.group.id= charuka ,@map(type= xml ) )define stream outStream(symbol string, deduplicationID string);  Following Example shows how to define a SQS sink to publish messages to the service", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/1.0.6/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.6/#sqs-source", 
            "text": "SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         wait.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,wait.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nSink\n\n\nsqs \n(Sink)\n\n\nSQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages\n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, message.group.id=\nSTRING\n, deduplication.id=\nSTRING\n, delay.interval=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue url which SQS Sink should connect to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.group.id\n\n        \nID of the group that the message belong to(only applicable for FIFO Queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndeduplication.id\n\n        \nID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelay.interval\n\n        \nTime in seconds for how long the message remain in the queue until it is available for the consumers to consume.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\nsqs\n,queue=\nqueue_url\n,access.key=\naws_access_key\n,secret.key=\naws_secret_key\n,region=\nregion\n,delay.interval=\n5\n,deduplication.id=\n{{deduplicationID}}\n,message.group.id=\ncharuka\n,@map(type=\nxml\n) )define stream outStream(symbol string, deduplicationID string);\n\n\n\n\n\nFollowing Example shows how to define a SQS sink to publish messages to the service\n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, wait.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwait.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,wait.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.5/#sqs-sink", 
            "text": "SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages  Syntax  @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue url which SQS Sink should connect to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         message.group.id \n         ID of the group that the message belong to(only applicable for FIFO Queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         deduplication.id \n         ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         delay.interval \n         Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type= sqs ,queue= queue_url ,access.key= aws_access_key ,secret.key= aws_secret_key ,region= region ,delay.interval= 5 ,deduplication.id= {{deduplicationID}} ,message.group.id= charuka ,@map(type= xml ) )define stream outStream(symbol string, deduplicationID string);  Following Example shows how to define a SQS sink to publish messages to the service", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/1.0.5/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.5/#sqs-source", 
            "text": "SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         wait.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,wait.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nSink\n\n\nsqs \n(Sink)\n\n\nSQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages\n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, message.group.id=\nSTRING\n, deduplication.id=\nSTRING\n, delay.interval=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue url which SQS Sink should connect to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.group.id\n\n        \nID of the group that the message belong to(only applicable for FIFO Queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndeduplication.id\n\n        \nID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelay.interval\n\n        \nTime in seconds for how long the message remain in the queue until it is available for the consumers to consume.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\nsqs\n,queue=\nqueue_url\n,access.key=\naws_access_key\n,secret.key=\naws_secret_key\n,region=\nregion\n,delay.interval=\n5\n,deduplication.id=\n{{deduplicationID}}\n,message.group.id=\ncharuka\n,@map(type=\nxml\n) )define stream outStream(symbol string, deduplicationID string);\n\n\n\n\n\nFollowing Example shows how to define a SQS sink to publish messages to the service\n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, wait.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwait.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,wait.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.4/#sqs-sink", 
            "text": "SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages  Syntax  @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue url which SQS Sink should connect to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         message.group.id \n         ID of the group that the message belong to(only applicable for FIFO Queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         deduplication.id \n         ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         delay.interval \n         Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type= sqs ,queue= queue_url ,access.key= aws_access_key ,secret.key= aws_secret_key ,region= region ,delay.interval= 5 ,deduplication.id= {{deduplicationID}} ,message.group.id= charuka ,@map(type= xml ) )define stream outStream(symbol string, deduplicationID string);  Following Example shows how to define a SQS sink to publish messages to the service", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/1.0.4/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.4/#sqs-source", 
            "text": "SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         wait.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,wait.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nSink\n\n\nsqs \n(Sink)\n\n\nSQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages\n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, message.group.id=\nSTRING\n, deduplication.id=\nSTRING\n, delay.interval=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue url which SQS Sink should connect to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.group.id\n\n        \nID of the group that the message belong to(only applicable for FIFO Queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndeduplication.id\n\n        \nID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelay.interval\n\n        \nTime in seconds for how long the message remain in the queue until it is available for the consumers to consume.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\nsqs\n,queue=\nqueue_url\n,access.key=\naws_access_key\n,secret.key=\naws_secret_key\n,region=\nregion\n,delay.interval=\n5\n,deduplication.id=\n{{deduplicationID}}\n,message.group.id=\ncharuka\n,@map(type=\nxml\n) )define stream outStream(symbol string, deduplicationID string);\n\n\n\n\n\nFollowing Example shows how to define a SQS sink to publish messages to the service\n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, wait.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwait.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,wait.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.3/#sqs-sink", 
            "text": "SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages  Syntax  @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue url which SQS Sink should connect to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         message.group.id \n         ID of the group that the message belong to(only applicable for FIFO Queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         deduplication.id \n         ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         delay.interval \n         Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type= sqs ,queue= queue_url ,access.key= aws_access_key ,secret.key= aws_secret_key ,region= region ,delay.interval= 5 ,deduplication.id= {{deduplicationID}} ,message.group.id= charuka ,@map(type= xml ) )define stream outStream(symbol string, deduplicationID string);  Following Example shows how to define a SQS sink to publish messages to the service", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/1.0.3/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.3/#sqs-source", 
            "text": "SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         wait.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,wait.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/api/1.0.2/", 
            "text": "API Docs - v1.0.2\n\n\nSink\n\n\nsqs \n(Sink)\n\n\nSQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages\n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, message.group.id=\nSTRING\n, deduplication.id=\nSTRING\n, delay.interval=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue url which SQS Sink should connect to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.group.id\n\n        \nID of the group that the message belong to(only applicable for FIFO Queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndeduplication.id\n\n        \nID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelay.interval\n\n        \nTime in seconds for how long the message remain in the queue until it is available for the consumers to consume.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\nsqs\n,queue=\nqueue_url\n,access.key=\naws_access_key\n,secret.key=\naws_secret_key\n,region=\nregion\n,delay.interval=\n5\n,deduplication.id=\n{{deduplicationID}}\n,message.group.id=\ncharuka\n,@map(type=\nxml\n) )define stream outStream(symbol string, deduplicationID string);\n\n\n\n\n\nFollowing Example shows how to define a SQS sink to publish messages to the service\n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, wait.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwait.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,wait.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#api-docs-v102", 
            "text": "", 
            "title": "API Docs - v1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.2/#sqs-sink", 
            "text": "SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages  Syntax  @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue url which SQS Sink should connect to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         message.group.id \n         ID of the group that the message belong to(only applicable for FIFO Queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         deduplication.id \n         ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         delay.interval \n         Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type= sqs ,queue= queue_url ,access.key= aws_access_key ,secret.key= aws_secret_key ,region= region ,delay.interval= 5 ,deduplication.id= {{deduplicationID}} ,message.group.id= charuka ,@map(type= xml ) )define stream outStream(symbol string, deduplicationID string);  Following Example shows how to define a SQS sink to publish messages to the service", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/1.0.2/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.2/#sqs-source", 
            "text": "SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         wait.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,wait.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/api/1.0.1/", 
            "text": "API Docs - v1.0.1\n\n\nSink\n\n\nsqs \n(Sink)\n\n\nSQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages\n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, message.group.id=\nSTRING\n, deduplication.id=\nSTRING\n, delay.interval=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue url which SQS Sink should connect to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.group.id\n\n        \nID of the group that the message belong to(only applicable for FIFO Queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndeduplication.id\n\n        \nID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelay.interval\n\n        \nTime in seconds for how long the message remain in the queue until it is available for the consumers to consume.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\nsqs\n,queue=\nqueue_url\n,access.key=\naws_access_key\n,secret.key=\naws_secret_key\n,region=\nregion\n,delay.interval=\n5\n,deduplication.id=\n{{deduplicationID}}\n,message.group.id=\ncharuka\n,@map(type=\nxml\n) )define stream outStream(symbol string, deduplicationID string);\n\n\n\n\n\nFollowing Example shows how to define a SQS sink to publish messages to the service\n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, wait.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwait.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,wait.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#api-docs-v101", 
            "text": "", 
            "title": "API Docs - v1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.1/#sqs-sink", 
            "text": "SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages  Syntax  @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue url which SQS Sink should connect to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         message.group.id \n         ID of the group that the message belong to(only applicable for FIFO Queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         deduplication.id \n         ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         delay.interval \n         Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type= sqs ,queue= queue_url ,access.key= aws_access_key ,secret.key= aws_secret_key ,region= region ,delay.interval= 5 ,deduplication.id= {{deduplicationID}} ,message.group.id= charuka ,@map(type= xml ) )define stream outStream(symbol string, deduplicationID string);  Following Example shows how to define a SQS sink to publish messages to the service", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/1.0.1/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.1/#sqs-source", 
            "text": "SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         wait.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,wait.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/api/1.0.0/", 
            "text": "API Docs - v1.0.0\n\n\nSink\n\n\nsqs \n(Sink)\n\n\n \n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, @map(...)))\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n\n\n\n\n\n\n \n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to subscribe and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, waiting.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwaiting.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,waiting.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.0/#sqs-sink", 
            "text": "Syntax  @sink(type= sqs , @map(...)))  Examples  EXAMPLE 1", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/1.0.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.0/#sqs-source", 
            "text": "SQS source allows users to subscribe and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , waiting.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services \n         \n         STRING \n         No \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User \n         \n         STRING \n         No \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         waiting.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,waiting.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/api/.md/", 
            "text": "", 
            "title": ""
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.7\n\n\nSink\n\n\nsqs \n(Sink)\n\n\nSQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages\n\n\n\nSyntax\n\n\n@sink(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, message.group.id=\nSTRING\n, deduplication.id=\nSTRING\n, delay.interval=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue url which SQS Sink should connect to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself)\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.group.id\n\n        \nID of the group that the message belong to(only applicable for FIFO Queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndeduplication.id\n\n        \nID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelay.interval\n\n        \nTime in seconds for how long the message remain in the queue until it is available for the consumers to consume.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\nsqs\n,queue=\nqueue_url\n,access.key=\naws_access_key\n,secret.key=\naws_secret_key\n,region=\nregion\n,delay.interval=\n5\n,deduplication.id=\n{{deduplicationID}}\n,message.group.id=\ncharuka\n,@map(type=\nxml\n) )define stream outStream(symbol string, deduplicationID string);\n\n\n\n\n\nFollowing Example shows how to define a SQS sink to publish messages to the service\n\n\n\nSource\n\n\nsqs \n(Source)\n\n\nSQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages\n\n\n\nSyntax\n\n\n@source(type=\nsqs\n, queue=\nSTRING\n, access.key=\nSTRING\n, secret.key=\nSTRING\n, region=\nSTRING\n, polling.interval=\nINT\n, wait.time=\nINT\n, max.number.of.messages=\nINT\n, visibility.timeout=\nINT\n, delete.messages=\nBOOL\n, delete.retry.interval=\nINT\n, max.number.of.delete.retry.attempts=\nINT\n, number.of.parallel.consumers=\nINT\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nqueue\n\n        \nQueue name which SQS Source should subscribe to\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.key\n\n        \nAccess Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsecret.key\n\n        \nSecret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself)\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nregion\n\n        \nAmazon Web Service Region\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nInterval (in milliseconds) between two message retrieval operations\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwait.time\n\n        \nMaximum amount (in seconds) that a polling call will wait for a message to become available in the queue\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.messages\n\n        \nMaximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue)\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nvisibility.timeout\n\n        \nThe length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue).\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.messages\n\n        \nShould the message be deleted from the queue after consuming it.\n\n        \ndelete.messages\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelete.retry.interval\n\n        \nTime interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation.\n\n        \n5000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.number.of.delete.retry.attempts\n\n        \nMaximum number retry attempts to be performed in case of a failure.\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnumber.of.parallel.consumers\n\n        \nSize of the thread pool that should be used for polling.\n\n        \n1\n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\nsqs\n,queue=\nqueue url\n,access.key=\naccess_key\n,secret.key=\nsecret_key\n,region=\nus-east-2\n,polling.interval=\n5000\n,max.number.of.messages=\n10\n,number.of.parallel.consumers=\n1\n,purge.messages=\ntrue\n,wait.time=\n2\n,visibility.timeout=\n30\n,delete.retry.interval=\n1000\n,max.number.of.delete.retry.attempts=\n10\n,@map(type=\nxml\n,enclosing.element=\n//events\n,@attributes(symbol=\nsymbol\n, message_id=\ntrp:MESSAGE_ID\n) ))define stream inStream (symbol string, message_id string);\n\n\n\n\n\nFollowing Example shows how to define a SQS source to receive messages from the service", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v107", 
            "text": "", 
            "title": "API Docs - v1.0.7"
        }, 
        {
            "location": "/api/latest/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/latest/#sqs-sink", 
            "text": "SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages  Syntax  @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue url which SQS Sink should connect to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) \n         none \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         message.group.id \n         ID of the group that the message belong to(only applicable for FIFO Queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         deduplication.id \n         ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         delay.interval \n         Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type= sqs ,queue= queue_url ,access.key= aws_access_key ,secret.key= aws_secret_key ,region= region ,delay.interval= 5 ,deduplication.id= {{deduplicationID}} ,message.group.id= charuka ,@map(type= xml ) )define stream outStream(symbol string, deduplicationID string);  Following Example shows how to define a SQS sink to publish messages to the service", 
            "title": "sqs (Sink)"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#sqs-source", 
            "text": "SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages  Syntax  @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         queue \n         Queue name which SQS Source should subscribe to \n         \n         STRING \n         No \n         No \n     \n     \n         access.key \n         Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         secret.key \n         Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) \n         null \n         STRING \n         Yes \n         No \n     \n     \n         region \n         Amazon Web Service Region \n         \n         STRING \n         No \n         No \n     \n     \n         polling.interval \n         Interval (in milliseconds) between two message retrieval operations \n         \n         INT \n         No \n         No \n     \n     \n         wait.time \n         Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.messages \n         Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) \n         1 \n         INT \n         No \n         No \n     \n     \n         visibility.timeout \n         The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         delete.messages \n         Should the message be deleted from the queue after consuming it. \n         delete.messages \n         BOOL \n         Yes \n         No \n     \n     \n         delete.retry.interval \n         Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. \n         5000 \n         INT \n         Yes \n         No \n     \n     \n         max.number.of.delete.retry.attempts \n         Maximum number retry attempts to be performed in case of a failure. \n         10 \n         INT \n         Yes \n         No \n     \n     \n         number.of.parallel.consumers \n         Size of the thread pool that should be used for polling. \n         1 \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= sqs ,queue= queue url ,access.key= access_key ,secret.key= secret_key ,region= us-east-2 ,polling.interval= 5000 ,max.number.of.messages= 10 ,number.of.parallel.consumers= 1 ,purge.messages= true ,wait.time= 2 ,visibility.timeout= 30 ,delete.retry.interval= 1000 ,max.number.of.delete.retry.attempts= 10 ,@map(type= xml ,enclosing.element= //events ,@attributes(symbol= symbol , message_id= trp:MESSAGE_ID ) ))define stream inStream (symbol string, message_id string);  Following Example shows how to define a SQS source to receive messages from the service", 
            "title": "sqs (Source)"
        }, 
        {
            "location": "/about/license/", 
            "text": "Copyright (c) 2018 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}